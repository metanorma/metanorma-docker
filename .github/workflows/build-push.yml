name: build-push

on:
  push:
    branches: [ main ]
    tags:
    - '*'
  pull_request:
  repository_dispatch:
  workflow_dispatch:

jobs:
  job_info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
    steps:
    - id: version
      run: |
        export CLI_VERSION=$(cat VERSION.mak | cut -d ' ' -f 3)
        echo "::set-output name=result::${CLI_VERSION}"

  build:
    name: Build (${{ matrix.image_type }}-${{ matrix.root_image.id }})
    runs-on: ubuntu-latest
    needs: job_info
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        root_image:
        - id: ruby
          image: ruby:3.1.1-slim-bullseye
        - id: ubuntu
          image: ubuntu:20.04
        image_type: [metanorma, mn]
        experimental: [false]

    steps:
    - uses: actions/checkout@v3

    - uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - id: meta
      uses: docker/metadata-action@v3
      if: ${{ matrix.image_type == 'metanorma' && matrix.root_image.id == 'ruby' }}
      with:
        images: |
          metanorma/${{ matrix.image_type }}
          ghcr.io/${{ matrix.image_type }}
        tags: |
          ${{ matrix.root_image.image }}
          type=edge,branch=main
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.vendor=Ribose Inc.
          org.opencontainers.image.licenses=BSD-3-Clause
          org.opencontainers.image.documentation=https://www.metanorma.org
          org.opencontainers.image.ref.name=metanorma/${{ matrix.image_type }}:${{ matrix.root_image.id }}
          org.opencontainers.image.base.name=${{ matrix.root_image.image }}
          org.opencontainers.image.title=Metanorma official public image
          org.opencontainers.image.description=Metanorma official public image on ${{ matrix.root_image.image }}
          org.opencontainers.image.version=${{needs.job_info.outputs.version}}

    - id: meta
      uses: docker/metadata-action@v3
      if: ${{ matrix.image_type != 'metanorma' || matrix.root_image.id != 'ruby' }}
      with:
        images: |
          metanorma/${{ matrix.image_type }}
          ghcr.io/${{ matrix.image_type }}
        flavor: |
          prefix=${{ matrix.root_image.image }},onlatest=true
        tags: |
          ${{ matrix.root_image.image }}
          type=edge,branch=main
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.vendor=Ribose Inc.
          org.opencontainers.image.licenses=BSD-3-Clause
          org.opencontainers.image.documentation=https://www.metanorma.org
          org.opencontainers.image.ref.name=metanorma/${{ matrix.image_type }}:${{ matrix.root_image.id }}
          org.opencontainers.image.base.name=${{ matrix.root_image.image }}
          org.opencontainers.image.title=Metanorma official public image
          org.opencontainers.image.description=Metanorma official public image on ${{ matrix.root_image.image }}
          org.opencontainers.image.version=${{needs.job_info.outputs.version}}

    # Build on linux/amd64 for testing first as it is fastest
    - id: build_container
      name: Build and export
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        file: Dockerfile.${{ matrix.root_image.id }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          METANORMA_IMAGE_NAME=${{ matrix.image_type }}-${{ matrix.root_image.id }}
        secret-files: |
          bundle_config=.bundle/config
        outputs: type=docker,dest=/tmp/docker-image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # - uses: yuichielectric/dive-action@0.0.4
    #   with:
    #     image: metanorma/${{ matrix.image_type }}-${{ matrix.root_image.id }}:${{needs.job_info.outputs.tag}}
    #     github-token: ${{ github.token }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
        path: /tmp/docker-image.tar
        retention-days: 1

  test:
    name: Test (${{ matrix.image_type }}-${{ matrix.root_image.id }}, ${{ matrix.flavor.id }})
    runs-on: ubuntu-latest
    needs:
      - build
      - job_info
    continue-on-error: ${{ matrix.flavor.experimental }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        root_image:
        - id: ruby
        - id: ubuntu

        image_type:
        - metanorma
        - mn

        flavor:
        - id: iso
          experimental: false
        - id: cc
          experimental: false
        - id: iec
          experimental: false
        - id: ogc
          experimental: false
        - id: un
          experimental: false
        - id: iho
          experimental: false
        - id: ietf
          experimental: false
        - id: bipm
          experimental: false
        - id: itu
          experimental: false
        - id: csa
          experimental: false
        # - id: gb
        #   experimental: true
        # - id: nist
        #   experimental: true

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
        path: /tmp

    - name: Load image
      run: |
        docker load --input /tmp/docker-image.tar
        docker image ls -a

    - name: Fetch samples (${{ matrix.flavor.id }})
      uses: actions/checkout@v3
      with:
        submodules: recursive
        repository: metanorma/mn-samples-${{ matrix.flavor.id }}
        token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
        path: ${{ github.workspace }}/samples
        fetch-depth: 1

    - name: Run tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/samples:/metanorma \
          -w /metanorma \
          $(docker image ls --format "{{.Repository}}:{{.Tag}}" metanorma/${{ matrix.image_type }}) \
          metanorma site generate --agree-to-terms .

  publish:
    name: Build+publish (${{ matrix.image_type }}-${{ matrix.root_image.id }} | ${{matrix.platform}})
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs:
    - test
    - job_info

    # remove after https://github.com/metanorma/emf2svg-ruby/issues/9
    continue-on-error: ${{ matrix.platform == 'linux/arm64' }}

    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        root_image:
        - id: ruby
          image: ruby:3.1.1-slim-bullseye
        - id: ubuntu
          image: ubuntu:20.04

        image_type:
        - metanorma
        - mn

        platform:
        - linux/amd64
        - linux/arm64

    steps:
    - uses: actions/checkout@v3

    - uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # We have previously built linux/amd64 images, just download them here.
    - name: Download artifact
      if: ${{ matrix.platform == 'linux/amd64' }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
        path: /tmp

    - name: Load image
      if: ${{ matrix.platform == 'linux/amd64' }}
      run: |
        docker load --input /tmp/docker-image.tar
        docker image ls -a

    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
        password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}

    - uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: metanorma-ci
        password: ${{ secrets.METANORMA_CI_PAT_TOKEN }}

    - id: meta
      uses: docker/metadata-action@v3
      if: ${{ matrix.image_type == 'metanorma' && matrix.root_image.id == 'ruby' }}
      with:
        images: |
          metanorma/${{ matrix.image_type }}
          ghcr.io/${{ matrix.image_type }}
        tags: |
          ${{ matrix.root_image.image }}
          type=edge,branch=main
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.vendor=Ribose Inc.
          org.opencontainers.image.licenses=BSD-3-Clause
          org.opencontainers.image.documentation=https://www.metanorma.org
          org.opencontainers.image.ref.name=metanorma/${{ matrix.image_type }}:${{ matrix.root_image.id }}
          org.opencontainers.image.base.name=${{ matrix.root_image.image }}
          org.opencontainers.image.title=Metanorma official public image
          org.opencontainers.image.description=Metanorma official public image on ${{ matrix.root_image.image }}
          org.opencontainers.image.version=${{needs.job_info.outputs.version}}

    - id: meta
      uses: docker/metadata-action@v3
      if: ${{ matrix.image_type != 'metanorma' || matrix.root_image.id != 'ruby' }}
      with:
        images: |
          metanorma/${{ matrix.image_type }}
          ghcr.io/${{ matrix.image_type }}
        flavor: |
          prefix=${{ matrix.root_image.image }},onlatest=true
        tags: |
          ${{ matrix.root_image.image }}
          type=edge,branch=main
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.vendor=Ribose Inc.
          org.opencontainers.image.licenses=BSD-3-Clause
          org.opencontainers.image.documentation=https://www.metanorma.org
          org.opencontainers.image.ref.name=metanorma/${{ matrix.image_type }}:${{ matrix.root_image.id }}
          org.opencontainers.image.base.name=${{ matrix.root_image.image }}
          org.opencontainers.image.title=Metanorma official public image
          org.opencontainers.image.description=Metanorma official public image on ${{ matrix.root_image.image }}
          org.opencontainers.image.version=${{needs.job_info.outputs.version}}

    # Push the loaded image on linux/amd64, build image on linux/arm64
    - id: build_container
      name: Build and export
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        file: Dockerfile.${{ matrix.root_image.id }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          METANORMA_IMAGE_NAME=${{ matrix.image_type }}-${{ matrix.root_image.id }}
        secret-files: |
          bundle_config=.bundle/config
        cache-from: type=gha
        cache-to: type=gha,mode=max

  announce:
    name: Announce to mn-samples-*
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: publish
    steps:
    - name: Trigger samples repositories
      env:
        GH_USERNAME: metanorma-ci
        GH_ACCESS_TOKEN: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
      run: |
        curl -LO --retry 3 https://raw.githubusercontent.com/metanorma/metanorma-build-scripts/main/trigger-gh-actions.sh
        for repo in iso cc gb iec itu ogc un iho nist
        do
          sh trigger-gh-actions.sh $ORGANISATION mn-samples-$repo $GH_USERNAME $GH_ACCESS_TOKEN $GITHUB_REPOSITORY
        done
