name: build-push-windows

on:
  push:
    branches: [ main ]
    tags:
    - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: read

env:
  IMAGE_NAME: "metanorma/metanorma"

jobs:
  job_info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
      head_tag: ${{ steps.check.outputs.head_tag }}
      foreign_pr: ${{ steps.check.outputs.foreign_pr }}
    steps:
    - uses: actions/checkout@v4
    - id: version
      run: |
        export CLI_VERSION=$(cat VERSION.mak | cut -d ' ' -f 3)
        echo "result=${CLI_VERSION}" >> $GITHUB_OUTPUT
    - name: Show version number
      run: echo ${{ steps.version.outputs.result }}
    - name: Retrieve tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set output variables
      id: check
      run: |
        fpr="no"
        tag=""
        if [[ "${{ github.ref }}" == refs/heads/* ]]; then
          tag="$(git tag --points-at HEAD)"
        elif [[ "${{ github.ref }}" == refs/pull/* ]] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.event.pull_request.base.repo.full_name }}" ]; then
          fpr="yes"
        fi
        echo "foreign_pr=${fpr}" >> $GITHUB_OUTPUT
        echo "head_tag=${tag}" >> $GITHUB_OUTPUT

  build:
    name: Build Windows (${{ matrix.root_image.id }})
    runs-on: ${{ matrix.root_image.os }}
    needs: job_info
    if: "(github.event_name == 'push' && needs.job_info.outputs.head_tag == '') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'"
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        root_image:
         - os: windows-2022
           id: ltsc2022
           base_image: "mcr.microsoft.com/windows/servercore:ltsc2022"
        experimental: [false]
        image_type: [metanorma]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: label_prefix
        env:
          IS_PRERELEASE: ${{matrix.image_type == 'mn'}}
          IS_MAIN: ${{matrix.image_type == 'metanorma' && matrix.root_image.id == 'ltsc2022'}}
        run: |
          if [ "$IS_MAIN" == "true" ]; then
            echo "result=" >> $GITHUB_OUTPUT
          elif [ "$IS_PRERELEASE" == "true" ]; then
            echo "result=prefix=pre-${{ matrix.root_image.id }}-,onlatest=true" >> $GITHUB_OUTPUT
          else
            echo "result=prefix=${{ matrix.root_image.id }}-,onlatest=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Show label prefix calculation
        run: echo ${{ steps.label_prefix.outputs.result }}
        shell: bash

      - name: Build Docker Image
        env:
          METANORMA_IMAGE_NAME: ${{ env.IMAGE_NAME }}:windows-${{ matrix.root_image.id }}
          METANORMA_VERSION: ${{ needs.job_info.outputs.version }}
        run: |
          docker build --pull --no-cache -t ${{ env.METANORMA_IMAGE_NAME }} -t ${{ env.METANORMA_IMAGE_NAME }}-${{ env.METANORMA_VERSION }} -t ghcr.io/${{ env.METANORMA_IMAGE_NAME }} -t ghcr.io/${{ env.METANORMA_IMAGE_NAME }}-${{ env.METANORMA_VERSION }} -f Dockerfile.windows --build-arg BASE_IMAGE=${{ matrix.root_image.base_image }} --label org.opencontainers.image.vendor="Ribose Inc." --label org.opencontainers.image.licenses="BSD-3-Clause" --label org.opencontainers.image.documentation="https://www.metanorma.org" --label org.opencontainers.image.ref.name="metanorma/${{ matrix.image_type }}:${{ matrix.root_image.id }}" --label org.opencontainers.image.base.name="${{ matrix.root_image.base_image }}" --label org.opencontainers.image.title="Metanorma official public image" --label org.opencontainers.image.description="Metanorma official public image on ${{ matrix.root_image.image }}" --label org.opencontainers.image.version="${{needs.job_info.outputs.version}}" .
        shell: bash

      - env:
          METANORMA_IMAGE_NAME: ${{ env.IMAGE_NAME }}:windows-${{ matrix.root_image.id }}
        run: |
          docker save -o docker-image.tar ${{ env.METANORMA_IMAGE_NAME }}
        shell: bash

      - run: |
          echo "${{ steps.meta.outputs.tags }}" > docker-tags.txt
          echo "${{ steps.meta.outputs.labels }}" > docker-labels.txt
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
          path: docker-image.tar
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: tags-${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
          path: docker-tags.txt
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: labels-${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}
          path: docker-labels.txt
          retention-days: 1

      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}

      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: metanorma-ci
          password: ${{ secrets.METANORMA_CI_PAT_TOKEN }}

      - name: Push Docker Image to Docker Hub
        if: github.event_name != 'pull_request'
        run: |
          docker image push --all-tags ${{ env.IMAGE_NAME }}
        shell: pwsh

      - name: Push Docker Image to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          docker image push --all-tags ghcr.io/${{ env.IMAGE_NAME }}
        shell: bash

  samples-matrix:
    name: Samples matrix
    uses: metanorma/ci/.github/workflows/build-sample-matrix.yml@main
    with:
      smoke: false
      flavors-only: true
      public-only: true

  test-matrix:
    name: Test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    needs: samples-matrix
    steps:
      - name: Build full test matrix
        id: build
        run: |
          echo '{ "root_image": [ { "os": "windows-2022", "id": "ltsc2022", "base_image": "mcr.microsoft.com/windows/servercore:ltsc2022" } ], "experimental": [false], "image_type": ["metanorma"] }' > docker-matrix.json
          echo '${{ needs.samples-matrix.outputs.samples-matrix }}' > samples-matrix.json
          echo "matrix=$(jq -s add docker-matrix.json samples-matrix.json | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo '${{ needs.samples-matrix.outputs.samples-matrix }}'
          echo "matrix=$(jq -s add docker-matrix.json samples-matrix.json | tr '\n' ' ')"

  test:
    name: Test (${{ matrix.image_type }}-${{ matrix.root_image.id }}, ${{ matrix.flavor.id }})
    runs-on: ${{ matrix.root_image.os }}
    needs:
      - build
      - job_info
      - test-matrix
    continue-on-error: ${{ matrix.flavor.experimental || matrix.root_image.id == 'ltsc2022' }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.matrix) }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}

      - uses: actions/download-artifact@v4
        with:
          name: tags-${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}

      - uses: actions/download-artifact@v4
        with:
          name: labels-${{ matrix.image_type }}-${{ matrix.root_image.id }}-${{ github.run_id }}

      - id: loaded_image
        name: Load image
        run: |
          docker load --input docker-image.tar
          echo "full_name=$(head -n 1 docker-tags.txt)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Fetch samples (${{ matrix.flavor.id }})
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: metanorma/mn-samples-${{ matrix.flavor.id }}
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          path: ${{ github.workspace }}/samples
          fetch-depth: 1

      - name: Run tests
        run: |
          MSYS_NO_PATHCONV=1 docker run --rm \
            -v "$(pwd -W)/samples:C:/metanorma" \
            -w C:/metanorma \
            ${{ env.IMAGE_NAME }}:windows-${{ matrix.root_image.id }} \
            metanorma site generate --strict --agree-to-terms .
        shell: bash
